"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8282],{27450:e=>{e.exports=JSON.parse('{"functions":[{"name":"bind","desc":"Initializes the WebSocket connection and starts handling events.\\n\\n    ","params":[{"name":"shardID","desc":"","lua_type":"number"},{"name":"totalShardCount","desc":"","lua_type":"number"},{"name":"host","desc":"","lua_type":"string"},{"name":"identify","desc":"","lua_type":"Identify"}],"returns":[],"function_type":"static","source":{"line":158,"path":"src/Structure/API/Shard.luau"}},{"name":"reconnect","desc":"Reconnects to the WebSocket by closing the current connection \\nand opening a new one.\\n\\n    ","params":[],"returns":[],"function_type":"static","source":{"line":177,"path":"src/Structure/API/Shard.luau"}},{"name":"resume","desc":"Resumes the WebSocket connection by closing the current connection, \\nopening a new one, and sending a resume payload.\\n\\n    ","params":[],"returns":[],"function_type":"static","source":{"line":191,"path":"src/Structure/API/Shard.luau"}},{"name":"handshake","desc":"Performs the initial handshake with the Discord Gateway \\nby sending an identify payload.\\n\\n    ","params":[],"returns":[],"function_type":"static","source":{"line":206,"path":"src/Structure/API/Shard.luau"}},{"name":"waitForHandshake","desc":"    \\n\\nYilding function to lock current coroutine until handshake is made.\\n    \\n    ","params":[],"returns":[],"function_type":"static","source":{"line":236,"path":"src/Structure/API/Shard.luau"}}],"properties":[],"types":[{"name":"GatewayIntent","desc":"A unique identifier to get certain events.","lua_type":"number","source":{"line":40,"path":"src/Enums.luau"}}],"name":"Gateway","desc":"Handles the WebSocket connection and communication with Discord\'s Gateway.\\n\\n:::caution Sensitive\\nData inside components are sensitive and could break Lumi if changed.  \\nDo not change or create components without reading the docs information.\\n:::","source":{"line":57,"path":"src/Structure/API/Shard.luau"}}')}}]);