"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2572],{13554:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"GettingStarted/ListeningEvents","title":"Listening to events","description":"In the previous sections, you did a basic bot structure.","source":"@site/docs/GettingStarted/ListeningEvents.md","sourceDirName":"GettingStarted","slug":"/GettingStarted/ListeningEvents","permalink":"/Lumi/docs/GettingStarted/ListeningEvents","draft":false,"unlisted":false,"editUrl":"https://github.com/0jewell/Lumi/edit/main/docs/GettingStarted/ListeningEvents.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Starting a new project","permalink":"/Lumi/docs/GettingStarted/SettingUp"},"next":{"title":"Once events","permalink":"/Lumi/docs/Guides/EventOnce"}}');var i=t(74848),o=t(28453);const r={sidebar_position:3},a="Listening to events",c={},d=[{value:"The <code>Session.listen()</code> method",id:"the-sessionlisten-method",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"listening-to-events",children:"Listening to events"})}),"\n",(0,i.jsxs)(n.p,{children:["In the previous sections, you did a basic bot structure.",(0,i.jsx)(n.br,{}),"\n","In this tutorial, we will be listening to the ",(0,i.jsx)(n.code,{children:"messageCreate"})," event and printing the message content."]}),"\n",(0,i.jsx)(n.p,{children:"With the previous tutorial code, we will be adding the listener:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local Lumi = require '../libs/Lumi'\r\n\r\nlocal Session = Lumi.session()\r\n\r\nSession.login('YOUR_BOT_TOKEN')\r\n\r\nSession.connect()\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-sessionlisten-method",children:["The ",(0,i.jsx)(n.code,{children:"Session.listen()"})," method"]}),"\n",(0,i.jsx)(n.admonition,{title:"Session methods",type:"info",children:(0,i.jsxs)(n.p,{children:["For detailed information about the ",(0,i.jsx)(n.code,{children:".listen()"})," method, ",(0,i.jsx)(n.a,{href:"/api/Session#listen",children:"you can check its API page"})]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".listen()"})," is a wrapper method. It calls another method from the component ",(0,i.jsx)(n.a,{href:"/api/Listener",children:"Listener"})," and starts listening to a given event.\r\nLets start modifying our code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local Lumi = require '../libs/Lumi'\r\n\r\n--// Our event module. It was mentioned in the previous tutorial\r\n--// It holds all events available in Lumi. Also necessary to type-check.\r\nlocal Events = Lumi.events\r\n\r\nlocal Session = Lumi.session()\r\n\r\nSession.login('YOUR_BOT_TOKEN')\r\n\r\n--// Defining our handler function, it will be called when the given event is emitted\r\n--// Automatic type cast on \"message\"\r\nlocal function onMessageCreate(message)\r\n    --// Printing the field content from the message\r\n    --// Note that you need the message_content intent to\r\n    --// have access to messages content (check the tip bellow)\r\n    print(message.content)\r\nend\r\n\r\n--// Selecting the event\r\n--// Passing our \"onMessageCreate\" function as a callback.\r\nSession.listen(Events.messageCreate, onMessageCreate)\r\n\r\nSession.connect()\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Messages content",type:"tip",children:(0,i.jsxs)(n.p,{children:["Tried and it printed a empty string? Your ",(0,i.jsx)(n.a,{href:"https://discord.com/developers/docs/topics/gateway#privileged-intents",children:"MESSAGE_CONTENT privileged intent"})," may be disabled.",(0,i.jsx)(n.br,{}),"\n","But don't worry, you can enable it easily, ",(0,i.jsx)(n.a,{href:"/docs/Guides/Intents",children:"check this guide."})]})}),"\n",(0,i.jsx)(n.p,{children:"In the next page, you will be doing your first requests to Discord."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);