"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95145:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={sidebar_position:2},a="Starting a new project",s={unversionedId:"Getting Started/SettingUp",id:"Getting Started/SettingUp",title:"Starting a new project",description:"This page assumes that you have read and completed the steps available at Installation.",source:"@site/docs/Getting Started/SettingUp.md",sourceDirName:"Getting Started",slug:"/Getting Started/SettingUp",permalink:"/Lumi/docs/Getting Started/SettingUp",draft:!1,editUrl:"https://github.com/astridyz/Lumi/edit/main/docs/Getting Started/SettingUp.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Application bot",permalink:"/Lumi/docs/Getting Started/Application"}},l={},c=[{value:"Getting your bot online",id:"getting-your-bot-online",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"starting-a-new-project"},"Starting a new project"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page assumes that you have read and completed the steps available at ",(0,o.kt)("a",{parentName:"p",href:"/Lumi/docs/Installation"},"Installation."))),(0,o.kt)("p",null,"After following the installation page, your repository should be like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"libs/\n  Lumi/\nsrc/\n  bot.lua\n")),(0,o.kt)("h3",{id:"getting-your-bot-online"},"Getting your bot online"),(0,o.kt)("p",null,"Lumi package has 3 importants modules inside it: Manager, Session and Events.\nThe main interface for interacting with Discord is the Session module, is is your client. You can check more about it ",(0,o.kt)("a",{parentName:"p",href:"/api/Session"},"on its API page")),(0,o.kt)("p",null,"Now, lets open a connection to Discord and make your bot go online",(0,o.kt)("br",{parentName:"p"}),"\n","On your ",(0,o.kt)("inlineCode",{parentName:"p"},"main.lua")," put this code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"--// Require Lumi\nlocal Lumi = require '../libs/Lumi'\n\n--// Session is a factory function that returns our Session class.\nlocal Session = Lumi.session()\n\n--// Authenticate your token in the Discord API\nSession.login('YOUR_BOT_TOKEN')\n\n--// Open gateway connection, your bot should go online now\nSession.connect()\n")),(0,o.kt)("p",null,"In the next page, you will learn how to listen and get information on events."))}d.isMDXComponent=!0}}]);