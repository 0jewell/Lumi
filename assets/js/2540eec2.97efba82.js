"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[962],{68290:e=>{e.exports=JSON.parse('{"functions":[{"name":"listen","desc":"Listen to a event and when it is emitted, calls a callback.\\n\\n    ","params":[{"name":"eventName","desc":"","lua_type":"string | number"},{"name":"callback","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"When the return function is called, the listener will stop listening to the given event.","lua_type":"() -> ()"}],"function_type":"static","source":{"line":60,"path":"src/Structure/Listen.lua"}},{"name":"emit","desc":"Calls every callback that is listening to a given event.\\n\\n    ","params":[{"name":"eventName","desc":"","lua_type":"string | number"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":82,"path":"src/Structure/Listen.lua"}}],"properties":[],"types":[],"name":"Listener","desc":"Page destined to people that want to help and extend Lumi.\\n\\n### Usage Example:\\n\\n:::caution Sensitive\\n    Data inside components are sensitive and could break Lumi if changed.  \\n    Do not change or create components without reading the docs information.\\n:::\\n\\nA event listener class. It has generic use so feel free to use it without many Lumi restrictions.\\n\\n```lua\\nlocal Connection;\\n\\nlocal function callback()\\n    print(\'Thanks!\')\\n    Connection()\\nend\\n\\nConnection = listener.listen(\'welcome\', callback)\\n\\nlistener.emit(\'Welcome\')\\n--\x3e Output: Thanks!\\n\\n```","private":true,"source":{"line":43,"path":"src/Structure/Listen.lua"}}')}}]);