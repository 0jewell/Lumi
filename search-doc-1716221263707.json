[{"title":"Serializer","type":0,"sectionRef":"#","url":"/Lumi/api/Serializer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#properties","content":" "},{"title":"syncs​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#syncs","content":"&lt;/&gt; Serializer.syncs: Cache&lt;Cache&gt; Yes, a cache of caches. "},{"title":"Functions​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#functions","content":" "},{"title":"payload​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#payload","content":"&lt;/&gt; Serializer.payload(package: {}) → ( eventName: string, data: {} )   "},{"title":"data​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#data","content":"&lt;/&gt; Serializer.data( rawData: {}, factory: (args...) → model ) → (data: container)-- Caution: this data is freezed and cannot be modified.  "},{"title":"Listener","type":0,"sectionRef":"#","url":"/Lumi/api/Listener","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#functions","content":" "},{"title":"listen​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#listen","content":"&lt;/&gt; Listener.listen( eventName: string | number, callback: (...any) → () ) → () → ()-- When the return function is called, the listener will stop listening to the given event. Listen to a event and when it is emitted, calls a callback.  "},{"title":"emit​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#emit","content":"&lt;/&gt; Listener.emit( eventName: string | number, ...: any ) → () Calls every callback that is listening to a given event. "},{"title":"Cache","type":0,"sectionRef":"#","url":"/Lumi/api/Cache","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#properties","content":" "},{"title":"name​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#name","content":"&lt;/&gt; Cache.name: string  "},{"title":"Functions​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#functions","content":" "},{"title":"get​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#get","content":"&lt;/&gt; Cache.get(key: any) → model?   "},{"title":"find​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#find","content":"&lt;/&gt; Cache.find(key: any) → boolean   "},{"title":"set​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#set","content":"&lt;/&gt; Cache.set( key: any, value: any ) → ()   "},{"title":"protect​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#protect","content":"&lt;/&gt; Cache.protect(key: any) → ()  "},{"title":"Session","type":0,"sectionRef":"#","url":"/Lumi/api/Session","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#properties","content":" "},{"title":"user​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#user","content":"&lt;/&gt; Session.user: User The bot user object. "},{"title":"Functions​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#functions","content":" "},{"title":"login​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#login","content":"&lt;/&gt; Session.login( token: string-- Your application token ) → () Authenticates your token in Discord API, trying to call Session.connect() without a valid token will throw an error.  "},{"title":"connect​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#connect","content":"&lt;/&gt; Session.connect() → (error: string?) Connects in Discord Gateway, opening the websocket connection. After calling it, your bot should go online and receive all Discord events.  "},{"title":"listen​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#listen","content":"&lt;/&gt; Session.listen( event: {},-- A event object. All events are listed in Events.lua file. callback: (args...) → () ) → () Listen to a given Event and calls a callback when it is emitted. Usage Example: Session.listen(Events.messageCreate, function(message) print(message.author.ID) end)   "},{"title":"getGuild​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getGuild","content":"&lt;/&gt; Session.getGuild(ID: string) → Guild?   "},{"title":"getUser​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getUser","content":"&lt;/&gt; Session.getUser(ID: string) → User?   "},{"title":"sendMessage​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#sendMessage","content":"&lt;/&gt; Session.sendMessage( channelID: string, content: {} | string ) → ( success: boolean, error: string? ) Sends a message in the given channel. The content table needs to be created using constructors available in Lumi. "},{"title":"Containers","type":0,"sectionRef":"#","url":"/Lumi/api/Containers","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#types","content":" "},{"title":"Channel​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Channel","content":"&lt;/&gt; interface Channel { name: string ID: string type: string guildID: string topic: string nsfw: boolean slowmode: number parentID: number }   "},{"title":"Guild​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Guild","content":"&lt;/&gt; interface Guild { members: number ID: string name: string description: string locale: string channels: Cache&lt;Channel&gt; roles: Cache&lt;Role&gt; }   "},{"title":"Member​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Member","content":"&lt;/&gt; interface Member { user: User? guild: Guild? nick: string }   "},{"title":"Message​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Message","content":"&lt;/&gt; interface Message { author: User member: Member? guild: Guild? ID: string everyone: boolean channel: Channel content: string respond: (content: {} | string) → ( success: Boolean, error: string? )-- Send a message in the current channel reply: (content: {} | string) → ( success: Boolean, error: string? )-- Send a message replying to the message returned by messageCreate event }   "},{"title":"Role​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Role","content":"&lt;/&gt; interface Role { ID: string name: string intColor: number managed: boolean mentionable: boolean }   "},{"title":"User​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#User","content":"&lt;/&gt; interface User { ID: string username: String discriminator: string-- Discriminators are deprecated nickname: string mention: () → string-- Returns a formated mentioning string }  "}]