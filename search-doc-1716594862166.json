[{"title":"Listening to events","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/ListeningEvents","content":"","keywords":""},{"title":"The Session.listen() method​","type":1,"pageTitle":"Listening to events","url":"/Lumi/docs/GettingStarted/ListeningEvents#the-sessionlisten-method","content":"Session methods For detailed information about the .listen() method, you can check its API page .listen() is a wrapper method. It calls another method from the component Listener and starts listening to a given event. Lets start modifying our code: local Lumi = require '../libs/Lumi' --// Our event module. It was mentioned in the previous tutorial --// It holds all events available in Lumi. Also necessary to type-check. local Events = Lumi.events local Session = Lumi.session() Session.login('YOUR_BOT_TOKEN') --// Defining our handler function, it will be called when the given event is emitted --// Automatic type cast on &quot;message&quot; local function onMessageCreate(message) --// Printing the field content from the message --// Note that you need the message_content intent to --// have access to messages content (check the tip bellow) print(message.content) end --// Selecting the event --// Passing our &quot;onMessageCreate&quot; function as a callback. Session.listen(Events.messageCreate, onMessageCreate) Session.connect()  Messages content Tried and it printed a empty string? Your MESSAGE_CONTENT privileged intent may be disabled. But don't worry, you can enable it easily, check this guide. In the next page, you will be doing your first requests to Discord. "},{"title":"Cache","type":0,"sectionRef":"#","url":"/Lumi/api/Cache","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#properties","content":" "},{"title":"name​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#name","content":"&lt;/&gt; Cache.name: string  "},{"title":"Functions​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#functions","content":" "},{"title":"get​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#get","content":"&lt;/&gt; Cache.get(key: any) → model?   "},{"title":"find​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#find","content":"&lt;/&gt; Cache.find(key: any) → boolean   "},{"title":"set​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#set","content":"&lt;/&gt; Cache.set( key: any, value: any ) → ()   "},{"title":"remove​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#remove","content":"&lt;/&gt; Cache.remove(key: any) → ()   "},{"title":"protect​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#protect","content":"&lt;/&gt; Cache.protect(key: any) → ()  "},{"title":"Listener","type":0,"sectionRef":"#","url":"/Lumi/api/Listener","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#functions","content":" "},{"title":"listen​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#listen","content":"&lt;/&gt; Listener.listen( eventName: string | number, callback: (...any) → () ) → () → ()-- When the return function is called, the listener will stop listening to the given event. Listen to a event and when it is emitted, calls a callback.  "},{"title":"emit​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#emit","content":"&lt;/&gt; Listener.emit( eventName: string | number, ...: any ) → () Calls every callback that is listening to a given event. "},{"title":"Serializer","type":0,"sectionRef":"#","url":"/Lumi/api/Serializer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#functions","content":" "},{"title":"payload​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#payload","content":"&lt;/&gt; Serializer.payload(package: {}) → ( eventName: string, data: {} )   "},{"title":"data​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#data","content":"&lt;/&gt; Serializer.data( rawData: {}, factory: (args...) → model ) → (data: container)-- Caution: this data is freezed and cannot be modified.  "},{"title":"Application bot","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/Application","content":"","keywords":""},{"title":"Create an App​","type":1,"pageTitle":"Application bot","url":"/Lumi/docs/GettingStarted/Application#create-an-app","content":"Go to Discord Developer Portal and click &quot;New Application&quot;.Enter your BOT name and press &quot;Create&quot;. On the General Overview page, you can update your app's basic information like its description and icon. "},{"title":"Configure the Bot User​","type":1,"pageTitle":"Application bot","url":"/Lumi/docs/GettingStarted/Application#configure-the-bot-user","content":"On the left sidebar, click &quot;Bot&quot;;Configure settings like privileged intents and installation permissions;In the Token section, you can copy and reset your bot's token;Now, with a working token, you can go to the next tutorial. Tokens Bot tokens are highly sensitive. Never share your token or check it into version control. Store it safely (e.g., in a password manager). "},{"title":"Session","type":0,"sectionRef":"#","url":"/Lumi/api/Session","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#properties","content":" "},{"title":"state​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#state","content":"&lt;/&gt; Session.state: State The currently state for all data in session.  "},{"title":"identify​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#identify","content":"&lt;/&gt; Session.identify: Identify Some information useful for handshake with Discord. Check docs for more information about this "},{"title":"Functions​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#functions","content":" "},{"title":"login​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#login","content":"&lt;/&gt; Session.login( token: string-- Your application token ) → () Authenticates your token in Discord API, trying to call Session.connect() without a valid token will throw an error.  "},{"title":"connect​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#connect","content":"&lt;/&gt; Session.connect() → (error: string?) Connects in Discord Gateway, opening the websocket connection. After calling it, your bot should go online and receive all Discord events. Topologically-aware This function is only usable if called within the context of Session.login  "},{"title":"listen​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#listen","content":"&lt;/&gt; Session.listen( event: {},-- A event object. All events are listed in Events.lua file. callback: (args...) → () ) → () Listen to a given Event and calls a callback when it is emitted. Usage Example: Session.listen(Events.messageCreate, function(message) print(message.author.ID) end)   "},{"title":"sendMessage​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#sendMessage","content":"&lt;/&gt; Session.sendMessage( channelID: string, content: {} | string, replyTo: string? ) → ( message: Message?, error: string? ) Sends a message in the given channel. The content table needs to be created using constructors available in Lumi. Topologically-aware This function is only usable if called within the context of Session.login "},{"title":"Starting a new project","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/SettingUp","content":"","keywords":""},{"title":"Getting your bot online​","type":1,"pageTitle":"Starting a new project","url":"/Lumi/docs/GettingStarted/SettingUp#getting-your-bot-online","content":"Lumi package has 3 importants modules inside it: Manager, Session and Events. The main interface for interacting with Discord is the Session module, it is your client. You can check more about it on its API page. Now, lets open a connection to Discord and make your bot go online. On your main.lua put this code: --// Require Lumi local Lumi = require '../libs/Lumi' --// Session is a factory function that returns our Session component. local Session = Lumi.session() --// Authenticate your token in the Discord API Session.login('YOUR_BOT_TOKEN') --// Open gateway connection, your bot should go online now Session.connect()  In the next page, you will learn how to listen and get information on events. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Lumi/docs/Installation","content":"","keywords":""},{"title":"Download the Luau Runtime (Lune)​","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#download-the-luau-runtime-lune","content":"First, you need to download the Luau runtime, also known as Lune. Lumi is built on top of Luau, so having the Luau runtime installed is a prerequisite for using Lumi. ✨ To download Lune, check their official website. Language server In order to have a working IDE with Luau, you have to download luau lsp. Check it here. Editor setup We recommend you to check this page to set up Lune types and built-in libraries. "},{"title":"Install Lumi via GitHub Submodules​","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#install-lumi-via-github-submodules","content":"Once you have the Luau runtime installed, you can proceed to install Lumi using GitHub submodules. GitHub submodules are repositories nested inside other repositories. You can check more about them here. To add Lumi as a submodule in your project repository, follow these steps: Navigate to your project repository; In order to add Lumi as a submodule in your repository, run the following commands: $ git submodule add https://github.com/astridyz/Lumi.git libs/Lumi $ git submodule init  Keep track of Lumi updates: $ git submodule update  Gitignore We recommend you to add /libs to your .gitignore file. Create your source folder and add a file bot.lua in it. Require Lumi folder in your bot.lua: --[[ Assuming the given root: libs/ Lumi/ src/ bot.lua ]] local Lumi = require('../libs/Lumi')  "},{"title":"Changing Gateway Intents","type":0,"sectionRef":"#","url":"/Lumi/docs/Guides/Intents","content":"","keywords":""},{"title":"What is an intent?​","type":1,"pageTitle":"Changing Gateway Intents","url":"/Lumi/docs/Guides/Intents#what-is-an-intent","content":"Maintaining a stateful application can be difficult when it comes to the amount of data your app is expected to process over a Gateway connection, especially at scale. Gateway intents are a system to help you lower the computational burden. Two types of intents exist:​ Standard intents can be passed by default. You don't need any additional permissions or configurations. Privileged intents require you to toggle the intent for your app in your app's settings within the Developer Portal before passing said intent. For verified apps (required for apps in 100+ guilds), the intent must also be approved after the verification process to use the intent. info The information above was taken directly from the Discord documentation. Check the complete details there. "},{"title":"Changing intents in Lumi​","type":1,"pageTitle":"Changing Gateway Intents","url":"/Lumi/docs/Guides/Intents#changing-intents-in-lumi","content":"Changing intents in Lumi is as easy as printing &quot;Hello World&quot;. Follow: --// Getting the session component local Session = Lumi.session() --// Identify is a table with the field &quot;intents&quot; --// this value is passed directly to the handshake, --// so make sure you change it before connecting to the gateway. Session.identify.intents = 47047 Session.connect()  "},{"title":"What is this intent number? (bla bla bla information)​","type":1,"pageTitle":"Changing Gateway Intents","url":"/Lumi/docs/Guides/Intents#what-is-this-intent-number-bla-bla-bla-information","content":"The intent number 47047 represents a combination of multiple Discord Gateway intents, allowing your bot to listen to various events. Intents are specified using bitwise flags, where each intent corresponds to a specific bit in a 32-bit integer. By summing the binary values of required intents, you get a single integer representing all of them. Calculating intents​ Example Intents Included in 47047: GUILD_CREATE (1 &lt;&lt; 0)GUILD_DELETE (1 &lt;&lt; 1)GUILD_MEMBER_UPDATE (1 &lt;&lt; 25)MESSAGE_CREATE (1 &lt;&lt; 9) To calculate 47047, you combine all these intents. But dont worry, you can use tools to calculate it for you. "},{"title":"Lumi","type":0,"sectionRef":"#","url":"/Lumi/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#features","content":"Lumi offers an easy-to-use interface, minimizing complexity and allowing you to focus on building great features. We offer a documention for Lumi components too. We want you to extend and modify Lumi to achieve your goals and get better results (★‿★) . "},{"title":"Contribution​","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#contribution","content":"We welcome contributions and feedback from the community. Feel free to reach out with any suggestions, bug reports, or enhancements. 🔎 You can contact me using Github (discussions, issues) or my Discord: @astridyz "},{"title":"Listening once to an event","type":0,"sectionRef":"#","url":"/Lumi/docs/Guides/EventOnce","content":"","keywords":""},{"title":"Session.listen() return​","type":1,"pageTitle":"Listening once to an event","url":"/Lumi/docs/Guides/EventOnce#sessionlisten-return","content":"The method .listen() returns a function that when called, disconnects our listener from the callback. info More information about the .listen() method is available at its API page Then, you can store this function in a variable and call it after the first callback call. Follow: --// Initializating an empty variable to give access to the &quot;onMessageCreate&quot; function local Connection; local function onMessageCreate(message) print(message.content) --// Calling it after the first callback call. --// This will disconnect the listener and stop listening to the event. Connection() end --// Changing the variable value to the .listen() method Connection = Session.listen(Events.messageCreate, onMessageCreate) Session.connect()  "},{"title":"Containers","type":0,"sectionRef":"#","url":"/Lumi/api/Containers","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#types","content":" "},{"title":"Channel​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Channel","content":"&lt;/&gt; interface Channel { name: string ID: string type: string guildID: string topic: string nsfw: boolean slowmode: number parentID: number newlyCreated: boolean sendMessage: (content: string | {}) → (error: string?) }   "},{"title":"Guild​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Guild","content":"&lt;/&gt; interface Guild { members: number ID: string name: string description: string locale: string channels: Cache&lt;Channel&gt; roles: Cache&lt;Role&gt; }   "},{"title":"Member​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Member","content":"&lt;/&gt; interface Member { user: User? guild: Guild? nick: string }   "},{"title":"Message​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Message","content":"&lt;/&gt; interface Message { author: User member: Member? guild: Guild? ID: string everyone: boolean channel: Channel content: string reply: (content: {} | string) → ( message: Message?, error: string? )-- Send a message in the current channel replying to the message returned by messageCreate event }   "},{"title":"Role​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Role","content":"&lt;/&gt; interface Role { ID: string name: string intColor: number managed: boolean mentionable: boolean }   "},{"title":"User​","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#User","content":"&lt;/&gt; interface User { ID: string username: String discriminator: string-- Discriminators are deprecated nickname: string isBot: boolean mention: () → string-- Returns a formated mentioning string }  "}]