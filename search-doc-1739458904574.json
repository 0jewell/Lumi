{"searchDocs":[{"title":"Application","type":0,"sectionRef":"#","url":"/Lumi/api/Application","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Application","url":"/Lumi/api/Application#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"Application","url":"/Lumi/api/Application#ID","content":"&lt;/&gt; Application.ID: string The unique identifier for the application.  ","version":null,"tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Application","url":"/Lumi/api/Application#name","content":"&lt;/&gt; Application.name: string The name of the application.  ","version":null,"tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Application","url":"/Lumi/api/Application#description","content":"&lt;/&gt; Application.description: string The description of the application.  ","version":null,"tagName":"h3"},{"title":"isPublic​","type":1,"pageTitle":"Application","url":"/Lumi/api/Application#isPublic","content":"&lt;/&gt; Application.isPublic: boolean Indicates if the application is public. ","version":null,"tagName":"h3"},{"title":"CommandResponse","type":0,"sectionRef":"#","url":"/Lumi/api/Command Response","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#properties","content":" ","version":null,"tagName":"h2"},{"title":"applicationID​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#applicationID","content":"&lt;/&gt; Command Response.applicationID: string The unique identifier for the application.  ","version":null,"tagName":"h3"},{"title":"token​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#token","content":"&lt;/&gt; Command Response.token: string The token for the interaction.  ","version":null,"tagName":"h3"},{"title":"ID​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#ID","content":"&lt;/&gt; Command Response.ID: string The unique identifier for the interaction.  ","version":null,"tagName":"h3"},{"title":"user​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#user","content":"&lt;/&gt; Command Response.user: User? The user who triggered the interaction, if available.  ","version":null,"tagName":"h3"},{"title":"guild​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#guild","content":"&lt;/&gt; Command Response.guild: Guild? The guild in which the interaction occurred, if available.  ","version":null,"tagName":"h3"},{"title":"channel​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#channel","content":"&lt;/&gt; Command Response.channel: Channel The channel in which the interaction occurred. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#functions","content":" ","version":null,"tagName":"h2"},{"title":"reply​","type":1,"pageTitle":"CommandResponse","url":"/Lumi/api/Command Response#reply","content":"&lt;/&gt; Command Response.reply(payload: {} | string) → (error: string?) Sends a reply to the interaction. The content can be a string or a data object created by Lumi builders. ","version":null,"tagName":"h3"},{"title":"Guild","type":0,"sectionRef":"#","url":"/Lumi/api/Guild","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#properties","content":" ","version":null,"tagName":"h2"},{"title":"members​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#members","content":"&lt;/&gt; Guild.members: number? The number of members in the guild.  ","version":null,"tagName":"h3"},{"title":"ID​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#ID","content":"&lt;/&gt; Guild.ID: number The unique identifier for the guild.  ","version":null,"tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#name","content":"&lt;/&gt; Guild.name: string? The name of the guild.  ","version":null,"tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#description","content":"&lt;/&gt; Guild.description: string? The description of the guild.  ","version":null,"tagName":"h3"},{"title":"locale​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#locale","content":"&lt;/&gt; Guild.locale: string? The preferred locale of the guild.  ","version":null,"tagName":"h3"},{"title":"channels​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#channels","content":"&lt;/&gt; Guild.channels: Cache&lt;Channel&gt; A cache containing the channels of the guild.  ","version":null,"tagName":"h3"},{"title":"roles​","type":1,"pageTitle":"Guild","url":"/Lumi/api/Guild#roles","content":"&lt;/&gt; Guild.roles: Cache&lt;Role&gt; A cache containing the roles of the guild. ","version":null,"tagName":"h3"},{"title":"Member","type":0,"sectionRef":"#","url":"/Lumi/api/Member","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Member","url":"/Lumi/api/Member#properties","content":" ","version":null,"tagName":"h2"},{"title":"user​","type":1,"pageTitle":"Member","url":"/Lumi/api/Member#user","content":"&lt;/&gt; Member.user: User? The user associated with this member.  ","version":null,"tagName":"h3"},{"title":"nick​","type":1,"pageTitle":"Member","url":"/Lumi/api/Member#nick","content":"&lt;/&gt; Member.nick: string The nickname of the member in the guild.  ","version":null,"tagName":"h3"},{"title":"guild​","type":1,"pageTitle":"Member","url":"/Lumi/api/Member#guild","content":"&lt;/&gt; Member.guild: Guild? The guild to which the member belongs. ","version":null,"tagName":"h3"},{"title":"CommandBuilder","type":0,"sectionRef":"#","url":"/Lumi/api/CommandBuilder","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#types","content":" ","version":null,"tagName":"h2"},{"title":"ApplicationCommandType​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#ApplicationCommandType","content":"&lt;/&gt; type ApplicationCommandType = number The type of the command. Available at Enums.  ","version":null,"tagName":"h3"},{"title":"InteractionContextType​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#InteractionContextType","content":"&lt;/&gt; type InteractionContextType = number The contexts the command can be used. Available at Enums.  ","version":null,"tagName":"h3"},{"title":"Command​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#Command","content":"&lt;/&gt; interface Command { name: string description: string type: ApplicationCommandType options: {Option} nsfw: boolean } contexts: {InteractionContextType} ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#functions","content":" ","version":null,"tagName":"h2"},{"title":"setName​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#setName","content":"&lt;/&gt; CommandBuilder.setName(name: string) → CommandBuilder-- Returns the builder object for chaining methods. Sets the name of the command.  ","version":null,"tagName":"h3"},{"title":"setDescription​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#setDescription","content":"&lt;/&gt; CommandBuilder.setDescription(description: string) → CommandBuilder Sets the description of the command.  ","version":null,"tagName":"h3"},{"title":"setType​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#setType","content":"&lt;/&gt; CommandBuilder.setType( type: ApplicationCommandType-- The type of the command. Available in Lumi.Enums ) → CommandBuilder Sets the type of the command.  ","version":null,"tagName":"h3"},{"title":"addOption​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#addOption","content":"&lt;/&gt; CommandBuilder.addOption(option: OptionBuilder) → CommandBuilder Adds an option to the command.  ","version":null,"tagName":"h3"},{"title":"enableNSFW​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#enableNSFW","content":"&lt;/&gt; CommandBuilder.enableNSFW() → CommandBuilder Marks the command as NSFW.  ","version":null,"tagName":"h3"},{"title":"setContexts​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#setContexts","content":"&lt;/&gt; CommandBuilder.setContexts(contexts: {InteractionContextType}) → CommandBuilder Sets the contexts for the command.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"CommandBuilder","url":"/Lumi/api/CommandBuilder#get","content":"&lt;/&gt; CommandBuilder.get() → Command-- The constructed command. Retrieves the constructed command. CAUTION No need to do this manually. Lumi handles already handles it. ","version":null,"tagName":"h3"},{"title":"Message","type":0,"sectionRef":"#","url":"/Lumi/api/Message","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#ID","content":"&lt;/&gt; Message.ID: string The unique identifier for the message.  ","version":null,"tagName":"h3"},{"title":"everyone​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#everyone","content":"&lt;/&gt; Message.everyone: boolean Indicates if the message mentions everyone.  ","version":null,"tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#content","content":"&lt;/&gt; Message.content: string The content of the message.  ","version":null,"tagName":"h3"},{"title":"channel​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#channel","content":"&lt;/&gt; Message.channel: Channel The channel where the message was sent.  ","version":null,"tagName":"h3"},{"title":"author​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#author","content":"&lt;/&gt; Message.author: User The author of the message.  ","version":null,"tagName":"h3"},{"title":"guild​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#guild","content":"&lt;/&gt; Message.guild: Guild? The guild where the message was sent.  ","version":null,"tagName":"h3"},{"title":"member​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#member","content":"&lt;/&gt; Message.member: Member? The member who sent the message. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#functions","content":" ","version":null,"tagName":"h2"},{"title":"reply​","type":1,"pageTitle":"Message","url":"/Lumi/api/Message#reply","content":"&lt;/&gt; Message.reply(content: string | {}) → (error: string?) Sends a reply to the message. The content can be a string or a Data object. ","version":null,"tagName":"h3"},{"title":"Listener","type":0,"sectionRef":"#","url":"/Lumi/api/Listener","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#functions","content":" ","version":null,"tagName":"h2"},{"title":"listen​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#listen","content":"&lt;/&gt; Listener.listen( eventName: string | number, callback: (...any) → () ) → function-- This function disconnects the listener when called. Listen to a event and when it is emitted, calls a callback.  ","version":null,"tagName":"h3"},{"title":"emit​","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#emit","content":"&lt;/&gt; Listener.emit( eventName: string | number, ...: any ) → () Calls every callback that is listening to a given event. ","version":null,"tagName":"h3"},{"title":"Enums","type":0,"sectionRef":"#","url":"/Lumi/api/Enums","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Enums","url":"/Lumi/api/Enums#properties","content":" ","version":null,"tagName":"h2"},{"title":"gatewayEvents​","type":1,"pageTitle":"Enums","url":"/Lumi/api/Enums#gatewayEvents","content":"&lt;/&gt; Enums.gatewayEvents: {GatewayIntent}   ","version":null,"tagName":"h3"},{"title":"applicationCommandTypes​","type":1,"pageTitle":"Enums","url":"/Lumi/api/Enums#applicationCommandTypes","content":"&lt;/&gt; Enums.applicationCommandTypes: {ApplicationCommandType}   ","version":null,"tagName":"h3"},{"title":"interactionContextTypes​","type":1,"pageTitle":"Enums","url":"/Lumi/api/Enums#interactionContextTypes","content":"&lt;/&gt; Enums.interactionContextTypes: {InteractionContextType}   ","version":null,"tagName":"h3"},{"title":"applicationCommandOptionTypes​","type":1,"pageTitle":"Enums","url":"/Lumi/api/Enums#applicationCommandOptionTypes","content":"&lt;/&gt; Enums.applicationCommandOptionTypes: {ApplicationCommandOptionType}  ","version":null,"tagName":"h3"},{"title":"Serializer","type":0,"sectionRef":"#","url":"/Lumi/api/Serializer","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#functions","content":" ","version":null,"tagName":"h2"},{"title":"payload​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#payload","content":"&lt;/&gt; Serializer.payload(package: {}) → ( eventName: string, data: {} )   ","version":null,"tagName":"h3"},{"title":"data​","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#data","content":"&lt;/&gt; Serializer.data( rawData: {}, factory: (args...) → model ) → (data: container)-- Caution: this data is freezed and cannot be modified.  ","version":null,"tagName":"h3"},{"title":"Channel","type":0,"sectionRef":"#","url":"/Lumi/api/Channel","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#ID","content":"&lt;/&gt; Channel.ID: string The unique identifier for the channel.  ","version":null,"tagName":"h3"},{"title":"type​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#type","content":"&lt;/&gt; Channel.type: string The type of the channel (e.g., text, voice).  ","version":null,"tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#name","content":"&lt;/&gt; Channel.name: string The name of the channel.  ","version":null,"tagName":"h3"},{"title":"guildID​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#guildID","content":"&lt;/&gt; Channel.guildID: string? The unique identifier for the guild (server) this channel belongs to.  ","version":null,"tagName":"h3"},{"title":"topic​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#topic","content":"&lt;/&gt; Channel.topic: string The topic of the channel.  ","version":null,"tagName":"h3"},{"title":"nsfw​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#nsfw","content":"&lt;/&gt; Channel.nsfw: boolean Indicates if the channel is marked as NSFW (Not Safe For Work).  ","version":null,"tagName":"h3"},{"title":"slowmode​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#slowmode","content":"&lt;/&gt; Channel.slowmode: number The slowmode delay in seconds.  ","version":null,"tagName":"h3"},{"title":"parentID​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#parentID","content":"&lt;/&gt; Channel.parentID: number The unique identifier for the parent category of the channel.  ","version":null,"tagName":"h3"},{"title":"newlyCreated​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#newlyCreated","content":"&lt;/&gt; Channel.newlyCreated: boolean Indicates if the channel was newly created. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#functions","content":" ","version":null,"tagName":"h2"},{"title":"send​","type":1,"pageTitle":"Channel","url":"/Lumi/api/Channel#send","content":"&lt;/&gt; Channel.send(content: string | {}) → (error: string?) Sends a message in the channel. The content can be a string or a data object created by Lumi builders. ","version":null,"tagName":"h3"},{"title":"OptionBuilder","type":0,"sectionRef":"#","url":"/Lumi/api/OptionBuilder","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#types","content":" ","version":null,"tagName":"h2"},{"title":"ApplicationCommandOptionType​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#ApplicationCommandOptionType","content":"&lt;/&gt; type ApplicationCommandOptionType = number The type of the option. Available at Enums.  ","version":null,"tagName":"h3"},{"title":"Option​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#Option","content":"&lt;/&gt; interface Option { name: string description: string required: boolean type: ApplicationCommandOptionType min_length: number, max_length: number?, min_value: number, max_value: number? }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#functions","content":" ","version":null,"tagName":"h2"},{"title":"setName​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setName","content":"&lt;/&gt; OptionBuilder.setName(name: string) → OptionBuilder-- Returns the builder object for chaining methods Sets the name of the option.  ","version":null,"tagName":"h3"},{"title":"setDescription​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setDescription","content":"&lt;/&gt; OptionBuilder.setDescription(description: string) → OptionBuilder Sets the description of the option.  ","version":null,"tagName":"h3"},{"title":"setType​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setType","content":"&lt;/&gt; OptionBuilder.setType( type: ApplicationCommandOptionType-- The type of the option. Available in Lumi.Enums ) → OptionBuilder Sets the type of the option.  ","version":null,"tagName":"h3"},{"title":"setRequired​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setRequired","content":"&lt;/&gt; OptionBuilder.setRequired() → OptionBuilder-- Returns the builder instance. Marks the option as required.  ","version":null,"tagName":"h3"},{"title":"setStringLength​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setStringLength","content":"&lt;/&gt; OptionBuilder.setStringLength( min: number, max: number? ) → OptionBuilder Sets the string length constraints for the option.  ","version":null,"tagName":"h3"},{"title":"setNumberLength​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#setNumberLength","content":"&lt;/&gt; OptionBuilder.setNumberLength( min: number, max: number? ) → OptionBuilder Sets the number value constraints for the option.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"OptionBuilder","url":"/Lumi/api/OptionBuilder#get","content":"&lt;/&gt; OptionBuilder.get() → Option-- The constructed option. Retrieves the constructed option. CAUTION No need to do this manually. Lumi handles already handles it. ","version":null,"tagName":"h3"},{"title":"Role","type":0,"sectionRef":"#","url":"/Lumi/api/Role","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#properties","content":" ","version":null,"tagName":"h2"},{"title":"guildID​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#guildID","content":"&lt;/&gt; Role.guildID: string? The ID of the guild to which the role belongs.  ","version":null,"tagName":"h3"},{"title":"ID​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#ID","content":"&lt;/&gt; Role.ID: string The unique identifier for the role.  ","version":null,"tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#name","content":"&lt;/&gt; Role.name: string The name of the role.  ","version":null,"tagName":"h3"},{"title":"intColor​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#intColor","content":"&lt;/&gt; Role.intColor: number The color of the role represented as an integer.  ","version":null,"tagName":"h3"},{"title":"managed​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#managed","content":"&lt;/&gt; Role.managed: boolean Whether the role is managed by an integration.  ","version":null,"tagName":"h3"},{"title":"mentionable​","type":1,"pageTitle":"Role","url":"/Lumi/api/Role#mentionable","content":"&lt;/&gt; Role.mentionable: boolean Whether the role is mentionable. ","version":null,"tagName":"h3"},{"title":"Cache","type":0,"sectionRef":"#","url":"/Lumi/api/Cache","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#properties","content":" ","version":null,"tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#name","content":"&lt;/&gt; Cache.name: string  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#functions","content":" ","version":null,"tagName":"h2"},{"title":"iter​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#iter","content":"&lt;/&gt; Cache.iter() → {model} To iterate under all asyncs in a for loop.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#get","content":"&lt;/&gt; Cache.get(key: any) → model   ","version":null,"tagName":"h3"},{"title":"find​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#find","content":"&lt;/&gt; Cache.find(key: any) → boolean   ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#set","content":"&lt;/&gt; Cache.set( key: any, value: any ) → ()   ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#remove","content":"&lt;/&gt; Cache.remove(key: any) → ()   ","version":null,"tagName":"h3"},{"title":"protect​","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#protect","content":"&lt;/&gt; Cache.protect(key: any) → ()  ","version":null,"tagName":"h3"},{"title":"User","type":0,"sectionRef":"#","url":"/Lumi/api/User","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"User","url":"/Lumi/api/User#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"User","url":"/Lumi/api/User#ID","content":"&lt;/&gt; User.ID: string The unique identifier for the user.  ","version":null,"tagName":"h3"},{"title":"username​","type":1,"pageTitle":"User","url":"/Lumi/api/User#username","content":"&lt;/&gt; User.username: string The username of the user.  ","version":null,"tagName":"h3"},{"title":"discriminator​","type":1,"pageTitle":"User","url":"/Lumi/api/User#discriminator","content":"&lt;/&gt; User.discriminator: string The discriminator of the user.  ","version":null,"tagName":"h3"},{"title":"nickname​","type":1,"pageTitle":"User","url":"/Lumi/api/User#nickname","content":"&lt;/&gt; User.nickname: string The global nickname of the user.  ","version":null,"tagName":"h3"},{"title":"isBot​","type":1,"pageTitle":"User","url":"/Lumi/api/User#isBot","content":"&lt;/&gt; User.isBot: boolean Whether the user is a bot. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"User","url":"/Lumi/api/User#functions","content":" ","version":null,"tagName":"h2"},{"title":"mention​","type":1,"pageTitle":"User","url":"/Lumi/api/User#mention","content":"&lt;/&gt; User:mention() → string Returns a mention string for the user. ","version":null,"tagName":"h3"},{"title":"Application bot","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/Application","content":"","keywords":"","version":"Next"},{"title":"Create an App​","type":1,"pageTitle":"Application bot","url":"/Lumi/docs/GettingStarted/Application#create-an-app","content":" Go to Discord Developer Portal and click &quot;New Application&quot;.Enter your BOT name and press &quot;Create&quot;.  On the General Overview page, you can update your app's basic information like its description and icon.  ","version":"Next","tagName":"h3"},{"title":"Configure the Bot User​","type":1,"pageTitle":"Application bot","url":"/Lumi/docs/GettingStarted/Application#configure-the-bot-user","content":" On the left sidebar, click &quot;Bot&quot;;Configure settings like privileged intents and installation permissions;In the Token section, you can copy and reset your bot's token;Now, with a working token, you can go to the next tutorial.  Tokens Bot tokens are highly sensitive. Never share your token or check it into version control. Store it safely (e.g., in a password manager). ","version":"Next","tagName":"h3"},{"title":"Session","type":0,"sectionRef":"#","url":"/Lumi/api/Session","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#properties","content":" ","version":null,"tagName":"h2"},{"title":"user​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#user","content":"&lt;/&gt; Session.user: User The current bot user model.  ","version":null,"tagName":"h3"},{"title":"application​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#application","content":"&lt;/&gt; Session.application: Application The current bot application model.  ","version":null,"tagName":"h3"},{"title":"state​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#state","content":"&lt;/&gt; Session.state: State The current state for all data in session.  ","version":null,"tagName":"h3"},{"title":"identify​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#identify","content":"&lt;/&gt; Session.identify: Identify Information useful for handshake with Discord. Check docs for more information about this. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#functions","content":" ","version":null,"tagName":"h2"},{"title":"login​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#login","content":"&lt;/&gt; Session.login(token: string) → () Authenticates your token in Discord API. Trying to call Session.connect() without a valid token will throw an error.  ","version":null,"tagName":"h3"},{"title":"connect​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#connect","content":"&lt;/&gt; Session.connect() → () Connects to Discord Gateway, opening the websocket connection. After calling it, your bot should go online and receive all Discord events.  ","version":null,"tagName":"h3"},{"title":"listen​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#listen","content":"&lt;/&gt; Session.listen( event: {},-- An event object. All events are listed in Events.lua file. callback: (args...) → () ) → () Listen to a given Event and calls a callback when it is emitted. Usage Example: Session.listen(Events.messageCreate, function(message) print(message.author.ID) end)   ","version":null,"tagName":"h3"},{"title":"getGlobalCommands​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getGlobalCommands","content":"&lt;/&gt; Session.getGlobalCommands() → ( data: {}?, error: string? ) Return a table with all the global current commands your bot has.  ","version":null,"tagName":"h3"},{"title":"registerGlobalCommand​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#registerGlobalCommand","content":"&lt;/&gt; Session.registerGlobalCommand( command: CommandBuilder-- A builder object created by Lumi builders. ) → (error: string?) Register a global application command in your BOT.  ","version":null,"tagName":"h3"},{"title":"deleteGlobalCommand​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#deleteGlobalCommand","content":"&lt;/&gt; Session.deleteGlobalCommand(ID: string) → (error: string?) Delete a global application command in your BOT.  ","version":null,"tagName":"h3"},{"title":"getGuildCommands​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getGuildCommands","content":"&lt;/&gt; Session.getGuildCommands(guildID: string) → ( data: {}?, error: string? ) Returns a table of commands registred in the defined guild.  ","version":null,"tagName":"h3"},{"title":"registerGuildCommand​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#registerGuildCommand","content":"&lt;/&gt; Session.registerGuildCommand( guildID: string, command: CommandBuilder-- A builder object created by Lumi builders. ) → (error: string?) Register a guild-only application command in your BOT.  ","version":null,"tagName":"h3"},{"title":"deleteGuildCommand​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#deleteGuildCommand","content":"&lt;/&gt; Session.deleteGuildCommand( guildID: string, ID: string ) → (error: string?)   ","version":null,"tagName":"h3"},{"title":"replyInteraction​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#replyInteraction","content":"&lt;/&gt; Session.replyInteraction( interactionID: string, token: string, data: {} | string ) → (error: string?) Send a response to an interaction. ::info Topologically-aware This function is only usable if called within the context of Session.connect() :::  ","version":null,"tagName":"h3"},{"title":"sendMessage​","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#sendMessage","content":"&lt;/&gt; Session.sendMessage( channelID: string, data: {} | string, replyTo: string? ) → (error: string?) Sends a message in the given channel. The content table needs to be created using builders available in Lumi. ::info Topologically-aware This function is only usable if called within the context of Session.connect() ::: ","version":null,"tagName":"h3"},{"title":"Gateway","type":0,"sectionRef":"#","url":"/Lumi/api/Gateway","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#types","content":" ","version":null,"tagName":"h2"},{"title":"GatewayIntent​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#GatewayIntent","content":"&lt;/&gt; type GatewayIntent = number A unique identifier to get certain events. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#functions","content":" ","version":null,"tagName":"h2"},{"title":"bind​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#bind","content":"&lt;/&gt; Gateway.bind( shardID: number, totalShardCount: number, host: string, identify: Identify ) → () Initializes the WebSocket connection and starts handling events.  ","version":null,"tagName":"h3"},{"title":"reconnect​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#reconnect","content":"&lt;/&gt; Gateway.reconnect() → () Reconnects to the WebSocket by closing the current connection and opening a new one.  ","version":null,"tagName":"h3"},{"title":"resume​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#resume","content":"&lt;/&gt; Gateway.resume() → () Resumes the WebSocket connection by closing the current connection, opening a new one, and sending a resume payload.  ","version":null,"tagName":"h3"},{"title":"handshake​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#handshake","content":"&lt;/&gt; Gateway.handshake() → () Performs the initial handshake with the Discord Gateway by sending an identify payload.  ","version":null,"tagName":"h3"},{"title":"waitForHandshake​","type":1,"pageTitle":"Gateway","url":"/Lumi/api/Gateway#waitForHandshake","content":"&lt;/&gt; Gateway.waitForHandshake() → () Yilding function to lock current coroutine until handshake is made. ","version":null,"tagName":"h3"},{"title":"Once events","type":0,"sectionRef":"#","url":"/Lumi/docs/Guides/EventOnce","content":"","keywords":"","version":"Next"},{"title":"Session.listen() return​","type":1,"pageTitle":"Once events","url":"/Lumi/docs/Guides/EventOnce#sessionlisten-return","content":" The method .listen() returns a function that when called, disconnects our listener from the callback.  info More information about the .listen() method is available at its API page  Then, you can store this function in a variable and call it after the first callback call. Follow:  --// Initializating an empty variable to give access to the &quot;onMessageCreate&quot; function local Connection; local function onMessageCreate(message) print(message.content) --// Calling it after the first callback call. --// This will disconnect the listener and stop listening to the event. Connection() end --// Changing the variable value to the return of the .listen() method Connection = Session.listen(Events.messageCreate, onMessageCreate) Session.connect()  ","version":"Next","tagName":"h3"},{"title":"Websocket","type":0,"sectionRef":"#","url":"/Lumi/api/Websocket","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Websocket","url":"/Lumi/api/Websocket#functions","content":" ","version":null,"tagName":"h2"},{"title":"send​","type":1,"pageTitle":"Websocket","url":"/Lumi/api/Websocket#send","content":"&lt;/&gt; Websocket.send( opcode: number,-- The opcode of the message. data: any-- The payload of the message. ) → () Sends a message through the WebSocket.  ","version":null,"tagName":"h3"},{"title":"open​","type":1,"pageTitle":"Websocket","url":"/Lumi/api/Websocket#open","content":"&lt;/&gt; Websocket.open() → () Opens the WebSocket connection and starts processing incoming messages.  ","version":null,"tagName":"h3"},{"title":"close​","type":1,"pageTitle":"Websocket","url":"/Lumi/api/Websocket#close","content":"&lt;/&gt; Websocket.close() → () Closes the WebSocket connection. ","version":null,"tagName":"h3"},{"title":"State","type":0,"sectionRef":"#","url":"/Lumi/api/State","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"State","url":"/Lumi/api/State#functions","content":" ","version":null,"tagName":"h2"},{"title":"addData​","type":1,"pageTitle":"State","url":"/Lumi/api/State#addData","content":"&lt;/&gt; State.addData( data: Data-- The data object to be added to the cache. ) → () Adds data to the appropriate cache based on its container type.  ","version":null,"tagName":"h3"},{"title":"removeData​","type":1,"pageTitle":"State","url":"/Lumi/api/State#removeData","content":"&lt;/&gt; State.removeData( ID: string, container: string ) → () Removes data from the appropriate cache based on its container type.  ","version":null,"tagName":"h3"},{"title":"getGuild​","type":1,"pageTitle":"State","url":"/Lumi/api/State#getGuild","content":"&lt;/&gt; State.getGuild(ID: string) → Guild   ","version":null,"tagName":"h3"},{"title":"getUser​","type":1,"pageTitle":"State","url":"/Lumi/api/State#getUser","content":"&lt;/&gt; State.getUser(ID: string) → User   ","version":null,"tagName":"h3"},{"title":"getChannel​","type":1,"pageTitle":"State","url":"/Lumi/api/State#getChannel","content":"&lt;/&gt; State.getChannel(ID: string) → Channel   ","version":null,"tagName":"h3"},{"title":"getRole​","type":1,"pageTitle":"State","url":"/Lumi/api/State#getRole","content":"&lt;/&gt; State.getRole(ID: string) → Role  ","version":null,"tagName":"h3"},{"title":"Starting a new project","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/SettingUp","content":"","keywords":"","version":"Next"},{"title":"Getting your bot online​","type":1,"pageTitle":"Starting a new project","url":"/Lumi/docs/GettingStarted/SettingUp#getting-your-bot-online","content":" Lumi package has 3 importants modules inside it: Manager, Session and Events. The main interface for interacting with Discord is the Session module, it is your client. You can check more about it on its API page.  Now, lets open a connection to Discord and make your bot go online. On your main.lua put this code:  --// Require Lumi local Lumi = require '../libs/Lumi' --// Session is a factory function that returns our Session component. local Session = Lumi.session() --// Authenticate your token in the Discord API Session.login('YOUR_BOT_TOKEN') --// Open gateway connection, your bot should go online now Session.connect()   In the next page, you will learn how to listen and get information on events. ","version":"Next","tagName":"h3"},{"title":"Intents","type":0,"sectionRef":"#","url":"/Lumi/docs/Guides/Intents","content":"","keywords":"","version":"Next"},{"title":"What is an intent?​","type":1,"pageTitle":"Intents","url":"/Lumi/docs/Guides/Intents#what-is-an-intent","content":" Maintaining a stateful application can be difficult when it comes to the amount of data your app is expected to process over a Gateway connection, especially at scale. Gateway intents are a system to help you lower the computational burden.  Two types of intents exist:​  Standard intents can be passed by default. You don't need any additional permissions or configurations. Privileged intents require you to toggle the intent for your app in your app's settings within the Developer Portal before passing said intent. For verified apps (required for apps in 100+ guilds), the intent must also be approved after the verification process to use the intent.  info The information above was taken directly from the Discord documentation. Check the complete details there.  ","version":"Next","tagName":"h3"},{"title":"Changing intents in Lumi​","type":1,"pageTitle":"Intents","url":"/Lumi/docs/Guides/Intents#changing-intents-in-lumi","content":" Changing intents in Lumi is as easy as printing &quot;Hello World&quot;. Follow:  --// Getting the session component local Session = Lumi.session() --// Enum is a module containing important flags in Discord API --// We will be using it to get the bitwise values of the intents local Enum = Lumi.enums --// Identify is a table with the field &quot;intents&quot; --// this value is passed directly to the handshake, --// so make sure you change it before connecting to the gateway. Session.identify.intents = { --// We send it as a table of intents, --// and then Lumi converts it to a bigger number. Enum.gatewayIntents.guilds, Enum.gatewayIntents.messageContent } Session.connect()   tip You can check for a full example there: https://github.com/astridyz/Lumi/blob/main/examples/intents.lua  ","version":"Next","tagName":"h3"},{"title":"Wait, bitwise values?​","type":1,"pageTitle":"Intents","url":"/Lumi/docs/Guides/Intents#wait-bitwise-values","content":" The intent number 47047, for example, represents a combination of multiple Discord Gateway intents, allowing your bot to listen to various events.  Intents are specified using bitwise flags, where each intent corresponds to a specific bit in a 32-bit integer. By summing the binary values of required intents, you get a single integer representing all of them. ","version":"Next","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/Lumi/docs/Installation","content":"","keywords":"","version":"Next"},{"title":"Download the Luau Runtime (Lune)​","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#download-the-luau-runtime-lune","content":" First, you need to download the Luau runtime, also known as Lune. Lumi is built on top of Luau, so having the Luau runtime installed is a prerequisite for using Lumi. ✨  To download Lune, check their official website.  Language server In order to have a working IDE with Luau, you have to download luau lsp. Check it here.  Editor setup We recommend you to check this page to set up Lune types and built-in libraries.  ","version":"Next","tagName":"h3"},{"title":"Install Lumi via GitHub Submodules​","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#install-lumi-via-github-submodules","content":" Once you have the Luau runtime installed, you can proceed to install Lumi using GitHub submodules. GitHub submodules are repositories nested inside other repositories. You can check more about them here.  To add Lumi as a submodule in your project repository, follow these steps:  Navigate to your project repository; In order to add Lumi as a submodule in your repository, run the following commands:  $ git submodule add https://github.com/0jewell/Lumi.git libs/Lumi $ git submodule init   Keep track of Lumi updates:  $ git submodule update   Gitignore We recommend you to add /libs to your .gitignore file.  Create your source folder and add a file bot.lua in it. Require Lumi folder in your bot.lua:  --[[ Assuming the given root: libs/ Lumi/ src/ bot.lua ]] local Lumi = require('../libs/Lumi')  ","version":"Next","tagName":"h3"},{"title":"Listening to events","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted/ListeningEvents","content":"","keywords":"","version":"Next"},{"title":"The Session.listen() method​","type":1,"pageTitle":"Listening to events","url":"/Lumi/docs/GettingStarted/ListeningEvents#the-sessionlisten-method","content":" Session methods For detailed information about the .listen() method, you can check its API page  .listen() is a wrapper method. It calls another method from the component Listener and starts listening to a given event. Lets start modifying our code:  local Lumi = require '../libs/Lumi' --// Our event module. It was mentioned in the previous tutorial --// It holds all events available in Lumi. Also necessary to type-check. local Events = Lumi.events local Session = Lumi.session() Session.login('YOUR_BOT_TOKEN') --// Defining our handler function, it will be called when the given event is emitted --// Automatic type cast on &quot;message&quot; local function onMessageCreate(message) --// Printing the field content from the message --// Note that you need the message_content intent to --// have access to messages content (check the tip bellow) print(message.content) end --// Selecting the event --// Passing our &quot;onMessageCreate&quot; function as a callback. Session.listen(Events.messageCreate, onMessageCreate) Session.connect()   Messages content Tried and it printed a empty string? Your MESSAGE_CONTENT privileged intent may be disabled. But don't worry, you can enable it easily, check this guide.  In the next page, you will be doing your first requests to Discord. ","version":"Next","tagName":"h3"},{"title":"Lumi","type":0,"sectionRef":"#","url":"/Lumi/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#features","content":" Lumi offers an easy-to-use interface, minimizing complexity and allowing you to focus on building great features.  We offer a documention for Lumi components too. We want you to extend and modify Lumi to achieve your goals and get better results (★‿★) .  ","version":"Next","tagName":"h3"},{"title":"Contribution​","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#contribution","content":" We welcome contributions and feedback from the community. Feel free to reach out with any suggestions, bug reports, or enhancements. 🔎 You can contact me using Github (discussions, issues) or my Discord: @0jewell ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}