[{"title":"Session","type":0,"sectionRef":"#","url":"/Lumi/api/Session","content":"","keywords":""},{"title":"Propertiesâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#properties","content":" "},{"title":"userâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#user","content":"&lt;/&gt; Session.user: User The bot user object. "},{"title":"Functionsâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#functions","content":" "},{"title":"loginâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#login","content":"&lt;/&gt; Session.login( token:Â string-- Your application token ) â†’Â () Authenticates your token in Discord API, trying to call Session.connect() without a valid token will throw an error.  "},{"title":"connectâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#connect","content":"&lt;/&gt; Session.connect() â†’Â (error:Â string?) Connects in Discord Gateway, opening the websocket connection. After calling it, your bot should go online and receive all Discord events.  "},{"title":"listenâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#listen","content":"&lt;/&gt; Session.listen( event:Â {},-- A event object. All events are listed in Events.lua file. callback:Â (args...)Â â†’Â () ) â†’Â () Listen to a given Event and calls a callback when it is emitted. Usage Example: Session.listen(Events.messageCreate, function(message) print(message.author.ID) end)   "},{"title":"getGuildâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getGuild","content":"&lt;/&gt; Session.getGuild(ID:Â string) â†’Â Guild?   "},{"title":"getUserâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#getUser","content":"&lt;/&gt; Session.getUser(ID:Â string) â†’Â User?   "},{"title":"sendMessageâ€‹","type":1,"pageTitle":"Session","url":"/Lumi/api/Session#sendMessage","content":"&lt;/&gt; Session.sendMessage( channelID:Â string, content:Â {}Â |Â string ) â†’Â (error:Â string?) Sends a message in the given channel. The content table needs to be created using constructors available in Lumi. "},{"title":"Listener","type":0,"sectionRef":"#","url":"/Lumi/api/Listener","content":"","keywords":""},{"title":"Functionsâ€‹","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#functions","content":" "},{"title":"listenâ€‹","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#listen","content":"&lt;/&gt; Listener.listen( eventName:Â stringÂ |Â number, callback:Â (...any)Â â†’Â () ) â†’Â ()Â â†’Â ()-- When the return function is called, the listener will stop listening to the given event. Listen to a event and when it is emitted, calls a callback.  "},{"title":"emitâ€‹","type":1,"pageTitle":"Listener","url":"/Lumi/api/Listener#emit","content":"&lt;/&gt; Listener.emit( eventName:Â stringÂ |Â number, ...:Â any ) â†’Â () Calls every callback that is listening to a given event. "},{"title":"Cache","type":0,"sectionRef":"#","url":"/Lumi/api/Cache","content":"","keywords":""},{"title":"Propertiesâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#properties","content":" "},{"title":"nameâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#name","content":"&lt;/&gt; Cache.name: string  "},{"title":"Functionsâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#functions","content":" "},{"title":"getâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#get","content":"&lt;/&gt; Cache.get(key:Â any) â†’Â model?   "},{"title":"findâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#find","content":"&lt;/&gt; Cache.find(key:Â any) â†’Â boolean   "},{"title":"setâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#set","content":"&lt;/&gt; Cache.set( key:Â any, value:Â any ) â†’Â ()   "},{"title":"protectâ€‹","type":1,"pageTitle":"Cache","url":"/Lumi/api/Cache#protect","content":"&lt;/&gt; Cache.protect(key:Â any) â†’Â ()  "},{"title":"Containers","type":0,"sectionRef":"#","url":"/Lumi/api/Containers","content":"","keywords":""},{"title":"Typesâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#types","content":" "},{"title":"Channelâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Channel","content":"&lt;/&gt; interface Channel { name:Â string ID:Â string type:Â string guildID:Â string topic:Â string nsfw:Â boolean slowmode:Â number parentID:Â number }   "},{"title":"Guildâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Guild","content":"&lt;/&gt; interface Guild { members:Â number ID:Â string name:Â string description:Â string locale:Â string channels:Â Cache&lt;Channel&gt; roles:Â Cache&lt;Role&gt; }   "},{"title":"Memberâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Member","content":"&lt;/&gt; interface Member { user:Â User? guild:Â Guild? nick:Â string }   "},{"title":"Messageâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Message","content":"&lt;/&gt; interface Message { author:Â User member:Â Member? guild:Â Guild? ID:Â string everyone:Â boolean channel:Â Channel content:Â string respond:Â (content:Â {}Â |Â string)Â â†’Â ( success:Â Boolean, error:Â string? )-- Send a message in the current channel reply:Â (content:Â {}Â |Â string)Â â†’Â ( success:Â Boolean, error:Â string? )-- Send a message replying to the message returned by messageCreate event }   "},{"title":"Roleâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#Role","content":"&lt;/&gt; interface Role { ID:Â string name:Â string intColor:Â number managed:Â boolean mentionable:Â boolean }   "},{"title":"Userâ€‹","type":1,"pageTitle":"Containers","url":"/Lumi/api/Containers#User","content":"&lt;/&gt; interface User { ID:Â string username:Â String discriminator:Â string-- Discriminators are deprecated nickname:Â string mention:Â ()Â â†’Â string-- Returns a formated mentioning string }  "},{"title":"Serializer","type":0,"sectionRef":"#","url":"/Lumi/api/Serializer","content":"","keywords":""},{"title":"Propertiesâ€‹","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#properties","content":" "},{"title":"syncsâ€‹","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#syncs","content":"&lt;/&gt; Serializer.syncs: Cache&lt;Cache&gt; Yes, a cache of caches. "},{"title":"Functionsâ€‹","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#functions","content":" "},{"title":"payloadâ€‹","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#payload","content":"&lt;/&gt; Serializer.payload(package:Â {}) â†’Â ( eventName:Â string, data:Â {} )   "},{"title":"dataâ€‹","type":1,"pageTitle":"Serializer","url":"/Lumi/api/Serializer#data","content":"&lt;/&gt; Serializer.data( rawData:Â {}, factory:Â (args...)Â â†’Â model ) â†’Â (data:Â container)-- Caution: this data is freezed and cannot be modified.  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Lumi/docs/GettingStarted","content":"Getting Started","keywords":""},{"title":"Lumi","type":0,"sectionRef":"#","url":"/Lumi/docs/intro","content":"","keywords":""},{"title":"Featuresâ€‹","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#features","content":"Lumi offers an easy-to-use interface, minimizing complexity and allowing you to focus on building great features. We offer a documention for Lumi components too. We want you to extend and modify Lumi to achieve your goals and get better results (â˜…â€¿â˜…) . "},{"title":"Contributionâ€‹","type":1,"pageTitle":"Lumi","url":"/Lumi/docs/intro#contribution","content":"We welcome contributions and feedback from the community. Feel free to reach out with any suggestions, bug reports, or enhancements. ðŸ”Ž "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Lumi/docs/Installation","content":"","keywords":""},{"title":"Download the Luau Runtime (Lune)â€‹","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#download-the-luau-runtime-lune","content":"First, you need to download the Luau runtime, also known as Lune. Lumi is built on top of Luau, so having the Luau runtime installed is a prerequisite for using Lumi. âœ¨ To download Lune, check their official website. Language server In order to have a working IDE with Luau, you have to download luau lsp. Check it here. Editor setup We recommend you to check this page to set up Lune types and built-in libraries. "},{"title":"Install Lumi via GitHub Submodulesâ€‹","type":1,"pageTitle":"Installation","url":"/Lumi/docs/Installation#install-lumi-via-github-submodules","content":"Once you have the Luau runtime installed, you can proceed to install Lumi using GitHub submodules. GitHub submodules are repositories nested inside other repositories. You chan check more about them here. To add Lumi as a submodule in your project repository, follow these steps: Navigate to your project repository In order to add Lumi as a submodule in your repository, run the following commands: $ git submodule add https://github.com/astridyz/Lumi.git libs/Lumi $ git submodule init  Keep track of Lumi updates: $ git submodule update  Gitignore We recommend you to add /libs to your .gitignore file. Require Lumi folder in your file.lua: --[[ Assuming the given root: libs/ Lumi/ src/ file.lua ]] local Lumi = require('../libs/Lumi')  "}]